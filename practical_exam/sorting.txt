void selectionSort(int arr, int n){
    for(int i = 0; i<n-1; i++){
        int min = i;
        for(int j = i+1; j<n; j++){
            if(arr[min]>arr[j]){
                min = j;
            }
        }
        if(min!=i){
            int temp = arr[min];
            arr[min] = arr[j];
            arr[j] = temp;
        }
    }
}

----------------------------------------------------
----------------------------------------------------

void insertionSort(int arr, int n){
    for(int i = 0; i<n; i++){
        int key = arr[i];
        int j = i-1;
        while(j>=0 && arr[j]>key){
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

----------------------------------------------------
----------------------------------------------------

void bubbleSort(int arr, int n){
    for(int i = 0; i<n; i++){
        int c = 0;
        for (int j = 0; j<n-i-1; j++){
            if(arr[j]>arr[j+1]){
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
                c=1;
            }
        }
        if (!c)
            break;
    }
}

----------------------------------------------------
----------------------------------------------------

void insertionSort(int arr[], int n){
    for (int i = 0 ; i<n; i++){
        int key = arr[i];
        int j = i+1;
        while(j>=0 && arr[j]>key){
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

----------------------------------------------------
----------------------------------------------------

void selectionSort(int arr[], int n){
    for (int i = 0; i<n-1; i++){
        int min = i;
        for(int j = i+1; j<n; j++){
            if (arr[j]<arr[min]){
                min = j;
            }
        }
        if(min!=i){
            int temp = arr[min];
            arr[min] = arr[i];
            arr[i] = temp;
        }
    }
}

----------------------------------------------------
----------------------------------------------------

void merge(int arr[], int si, int mid, int ei){
    int merged[ei-si+1];
    int x = 0, idx1 = si, idx2 = mid+1;
    while(idx1<=mid && idx2<=ei){
        if(arr[idx1]>arr[idx2]){
            merged[x++] = arr[idx2++];
        }
        else{
            merged[x++] = arr[idx1++];
        }
    }
    while(idx1<=mid){
        merged[x++] = arr[idx1++];
    }
    while(idx2<=ei){
        merged[x++] = arr[idx2++];
    }
    for(int i = 0; i<=(ei-si); i++){
        arr[si+i] = merged[i];
    }
}

void mergeSort(int arr[], int si, int ei){
    if(si>=ei){
        return;
    }
    int mid = si + (ei-si)/2;
    mergeSort(arr, si, mid);
    mergeSort(arr, mid+1, ei);
    merge(arr, si, mid, ei);
}

----------------------------------------------------
----------------------------------------------------

void maxHeap(int a[], int i, int n){
    int l = 2*i+1;
    int r = 2*i+2;
    int largest = i;
    if(l<n && a[l]>a[largest]){
        largest = l;
    }
    if(r<n && a[r]>a[largest]){
        largest = r;
    }
    if(largest!=i){
        int temp = a[largest];
        a[largest] = a[i];
        a[i] = temp;
        maxHeap(a,largest, n);
    }
}

void heapify(int a[], int n){
    int i, temp;
    for(i = n/2-1; i>=0; i--){
        maxHeap(a, i,n);
    }
}

void heapSort(int a[], int n){ // n=index so give 1 less than size
    heapify(a,n);
    int i, temp;
    for(i = n-1; i>=1; i--){
        temp = a[i];
        a[i] = a[0];
        a[0] = temp;
        maxHeap(a, 0, i);
    }
}

==================================================








void insertionSort(int a[], int n){
    int j;
    for(int i = 1; i<n; i++){
        int key = a[i];
        j = i-1;
        while(j>=0 && a[j]>key){
            a[j+1] = a[j];
            j--;
        }
        a[j+1] = key;
    }
}



void selectionSort(int a[], int n){
    for(int i = 0; i<n-1; i++){
        int min = i;
        for(int j = i+1; j<n; j++){
            if(a[min]>a[j]){
                min = j;
            }
        }
        if (min!=i){
            int temp = a[i];
            a[i] = a[min];
            a[min] = temp;
        }
    }
}